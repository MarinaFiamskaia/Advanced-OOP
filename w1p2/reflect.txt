/*
Student:	Marina Fiamskaia
Student ID:	025-698-051
email:	mfiamska@myseneca.ca
Date:		May 21, 2022
Subject:	OOP345 NAA
Project:	Workshop 1 part 2 reflect

****I have done all the coding by myself and only copied the code that my professor provided to complete my workshops and assignments.****
*/
The
The main concepts that were covered in the workshop one are: the main function that accepts command line arguments, its proper syntax and use; placing a guard on class definition from duplication in a translation unit; accessing a variable defined in a different translation unit; declaring a local variable that resides in a memory throughout the lifetime of the program; upgrading code to accept and managed a user-defined string of any length; review of previously learned concepts in a OOP245. I have learned the practical “in a code” meaning of the difference between internal and external linkage. The internal linkage is when a link or connection is created across different scopes within the same module. The great example of internal linkage in the workshop 1 would be a link between the foodorder.h and foodorder.cpp that exist in the same module FoodOrder and connects two separate blocks of code. The external linkage, on the other hand, means the link between different scopes that connect different modules. The example of external linkage would be the link between FoodOrder module and main module. Also, I have learned the practical “in a code” meaning of static variables and how they can be used in a code. A great example of static variable in a worshop one is a static int counter=1; declared on line 74 of foodorder.cpp. It is created and initialized only once in the program and it got global lifetime, but local scope. Furthermore, I have made slight changes to the FoodOrder module to be able to accept string of any length as a value to one of the class member variables. To be able to do, I have declared m_foodDesc member variable as a pointer to a string that will be dynamically populated and initialized it as a nullptr. Another change was I have added three member-methods to the class FoodOrder: the copy constructor, the copy assignment operator, and destructor. The reason is The Rule of Three when dealing with dynamic memory in a class. Also, I have changed my set method so that instead simply copying a string from source to destination, it is first deallocating the memory, then it dynamically allocates new memory and only then it copies the source string to the newly allocated destination memory. And lastly, I have changed the syntax for the read method, so that it will be capable to read string of any length.
